plugins {
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id("com.github.sherter.google-java-format") version "0.9"
	id 'java'
	id 'jacoco'
}

group = 'com.getir'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

sourceSets {
	integrationTest {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	integrationTestImplementation.extendsFrom implementation
	integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest:2.6.7'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.7'
	implementation 'org.springframework.boot:spring-boot-starter:2.5.4'
	implementation 'io.springfox:springfox-boot-starter:3.0.0'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.2'
	implementation('org.apache.cxf:cxf-spring-boot-starter-jaxrs:3.5.1')
	implementation('com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.13.2')
	implementation('com.fasterxml.jackson.module:jackson-modules-java8:2.13.2')
	implementation('org.zalando:jackson-datatype-money:1.3.0')
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.7'
	testImplementation 'com.github.javafaker:javafaker:1.0.2'
	testImplementation('org.mock-server:mockserver-netty:5.13.2')
	runtimeOnly 'com.h2database:h2:2.1.212'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'

	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	shouldRunAfter test
}

integrationTest {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = false
			element = "CLASS"
			limit {
				minimum = 0.5
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification
